/*
原本自己的思路，先二分查找找到mid，然后向前向后寻找最小、最大下标，这样后面变成O(n)了，不是很好
*/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int i=0,j=nums.size()-1;
        if(j==-1) return {-1,-1};
        int mid;
        while(i<=j){
            mid=(j+i)/2;
            if(nums[mid]<target)
                i=mid+1;
            else if(nums[mid]>target)
                j=mid-1;
            else break;
        }
        if(i>j) return {-1,-1};
        i=mid;
        j=mid;
        while(i>0&&nums[i-1]==target)
                i--;
        while(j<nums.size()-1&&nums[j+1]==target)
                j++;
        return {i,j};
    }
};

/*
大神的思路：
将查找最小、最大下标看为2个二分查找的子问题
1.查找最小下标：left<mid则left+1  right=mid
2.查找最大下标：right>mid则right=right-1  left=mid
*/
class Solution {
private:
    int findLowerBound(vector<int> &nums, int target) {
        int size = nums.size();
        int left = 0;
        int right = size - 1;
        while (left < right) {
            int mid = (left + right) >> 1;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        if (nums[left] != target) {
            return -1;
        }
        return left;
    }

    int findUpBound(vector<int> &nums, int target) {
        int size = nums.size();
        int left = 0;
        int right = size - 1;
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            if (nums[mid] > target) {
                right = mid - 1;
            } else {
                left = mid;

            }
        }
        if (nums[left] != target) {
            return -1;
        }
        return left;
    }


public:
    vector<int> searchRange(vector<int> &nums, int target) {
        int size = nums.size();
        if (size == 0) {
            return {-1, -1};
        }
        int num1 = findLowerBound(nums, target);

        if (num1 == -1) {
            return {-1, -1};
        }
        int num2 = findUpBound(nums, target);
        return {num1, num2};
    }
};
