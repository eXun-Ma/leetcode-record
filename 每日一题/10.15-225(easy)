/*
*基本思路
*创建2个队列实现堆栈，每次要取元素或者弹出元素时，将前n-1个元素转移到另一个队列中，从而对队列的第n个元素(即最晚进的元素)进行操作
*/
class MyStack {
public:
    /** Initialize your data structure here. */
    queue<int> q1,q2;
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(!q1.empty())
            q1.push(x);
        else q2.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int x;
        if(!q1.empty()){
            x=q1.front();
            q1.pop();
            while(!q1.empty()){
                q2.push(x);
                x=q1.front();
                q1.pop();
            }
        }
        else{
            x=q2.front();
            q2.pop();
            while(!q2.empty()){
                q1.push(x);
                x=q2.front();
                q2.pop();
            }
        }
        return x;
    }
    
    /** Get the top element. */
    int top() {
        int x;
        if(!q1.empty()){
            while(!q1.empty()){
                x=q1.front();
                q2.push(x);
                q1.pop();
            }
        }
        else{
            while(!q2.empty()){
                x=q2.front();
                q1.push(x);
                q2.pop();
            }
        }
        return x;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(q1.empty()&&q2.empty())
            return true;
        return false;
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
