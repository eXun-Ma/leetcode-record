double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
        int flag=(nums1Size+nums2Size)%2;//判断数组总长度是奇数个还是偶数个
        int index=(nums1Size+nums2Size)/2+1;//中位数位于第几个数
        int i=0,j=0,count=0;//i、j分别为num1、num2的指针，count统计当前已经访问元素个数
        double n1,n2;//n1记录访问到的第index个数字， 当总长度为偶数个时n2记录第index-1个数字
        while(i<nums1Size&&j<nums2Size&&count<index){
            count++;
            if(nums1[i]<=nums2[j]){
                if(count==index)
                    n1=nums1[i];
                if(!flag&&count==index-1)
                    n2=nums1[i];
                i++;
            }
            else{
                if(count==index)
                    n1=nums2[j];
                if(!flag&&count==index-1)
                    n2=nums2[j];
                j++;
            }
        }
        while(j<nums2Size&&count<index){//若第一个数组被访问完毕还没得到中位数
            count++;
            if(count==index)
                n1=nums2[j];
            if(!flag&&count==index-1)
                n2=nums2[j];
            j++;
        }
        while(i<nums1Size&&count<index){//若第二个数组被访问完毕还没得到中位数
            count++;
            if(count==index)
                n1=nums1[i];
            if(!flag&&count==index-1)
                n2=nums1[i];
            i++;
        }
        
        if(flag)//奇数个的情况
            return n1;
        return (n1+n2)/2;//偶数个的情况
    
}
