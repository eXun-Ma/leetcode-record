/*给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？*/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int a=0;
        for(int i=0;i<nums.size();i++)
            a^=nums[i];
        return a;
    }
};
/*第一反应想用hash，但是因为不能使用额外的空间，所以没采用该解法。这里用到了亦或运算。
a⊕0=a   
a⊕a=0 
a⊕b⊕a=(a⊕a)⊕b=0⊕b=b
题目中除了要找的那个数字，其他数字都出现了两次，利用该特点可以初始化一个变量a=0，对数组中每个数字进行异或运算，最后剩下来的是要找的那个数字。
*/
